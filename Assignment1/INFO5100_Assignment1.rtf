{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Avenir-Book;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12400\viewh11280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 1. Design a Traffic Controller System for a Junction\
\
A junction may have:\
a. Traffic lights\
b. Cars\
c. Pedestrian signal lights\
d. Pedestrians\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: Cars\
State: \
	make, colour, registrationNumber\
\
Behaviours:\
	carShouldStop() \{\
	//code to stop car\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	carShouldMove() \{\
	//code to move car\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
	carShouldSlowDown() \{\
	//code to slow down car\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 - - - - - - - - - - - - - - - - - - - \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Class: Pedestrians\
State:\
	name, gender, age, isDisabled\
\
Behaviours:\
	pedestrianShouldWalk() \{\
	//code to make pedestrian walk\
	\}\
\
	pedestrianShouldWait() \{\
	//code to make pedestrian wait on pavement\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 - - - - - - - - - - - - - - - - - - - \
\
Class : PedestrianSignalLights\
State:\
	isWorking, shouldWalk, shouldWait\
\
Behaviours:\
	showWaitLight() \{\
	//code to show Wait light\
\
	shouldWalk = false\
	shouldWait = true\
\
	Pedestrian.pedestrianShouldWait()\
	\}\
\
	showWalkLight() \{\
	//code to show walk light\
\
	shouldWait = false\
	shouldWalk = true\
\
	Pedestrian.pedestrianShouldWalk()\
	\}\
\
- - - - - - - - - - - - - - - - - - - \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Class: TrafficLights\
State: \
	isWorking\
\
Behaviours:\
	showRedLight() \{\
	Cars.carShouldStop()\
	\
	if(PedestrianSignalLights.isWorking) \{\
		if(PedestrianSignalLights.canWalk) \{\
			Pedestrian.shouldWalk\
		\}\
		else \{\
			Pedestrian.shouldWait\
		\}\
	\}\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	showAmberLight() \{\
	Cars.carShouldSlowDown()\
	\
	if(PedestrianSignalLights.isWorking) \{\
		if(PedestrianSignalLights.canWalk) \{\
			Pedestrian.shouldWalk\
		\}\
		else \{\
			Pedestrian.shouldWait\
		\}\
	\}\
	\}\
\
	showGreenLight() \{\
	Cars.carShouldMove()\
	\
	if(PedestrianSignalLights.isWorking) \{\
		if(PedestrianSignalLights.canWalk) \{\
			Pedestrian.shouldWalk\
		\}\
		else \{\
			Pedestrian.shouldWait\
		\}\
	\}\
	\}\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: TrafficControllerSystem\
\
State: activeDirection\
\
Behaviours:\
	serveTheJunction() \{\
		//to be repeated at a fixed interval\
\
		if(activeDirection) \{\
		TrafficLights.showGreen()\
		PedestrianSignalLights. showWaitLight()\
		\}\
		else \{\
		TrafficLights.showRed()\
		PedestrianSignalLights. showWalkLight()\
		\}\
	\}\
\
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\
\
2. Design a Car Rental System\
\
A car rental system may have:\
\
a. Cars\
b. Customers\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: Cars\
\
State: make, colour, registrationNumber, rentPerDay, isAvailable, isInWorkingCondition, lastServiceDate, isInGoodReturnCondition\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: Customer\
\
State: age, driversLicense, purposeOfRentingCar, budget\
\
Behaviours:\
	chooseCarBasedOnBudget(float budget) \{\
	if(Car.rentPerDay <= budget) \{\
		CarRentalService.rentCar()\
	\}\
	\}\
\
	returnCarAfterStipulatedTime() \{\
	//code to remind user to return car on rental deadline date\
	\}\
 \
- - - - - - - - - - - - - - - - - - - \
\
Class: CarRentalService\
\
Behaviours:\
	rentCar() \{\
	//perform initial condition checks on car - brakes, lights, tyres in good condition, last service date - and set state variable accordingly\
	\
	if(Car.isAvailable && Car.isInWorkingCondition) \{\
		//process payment\
	\}\
	\}\
\
	receiveCar() \{\
	//perform checks on car for return state\
	\
	if( ! Car.isInGoodReturnCondition) \{\
		//slam penalty\
	\}\
	\}\
\
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\
\
3. Design a Course Registration Platform\
\
Class: Course\
\
State: courseName, courseCode, courseLocation, isOnlineCourse, faculty, scheduledLectures, credits, maximumClassStrength, coursePrerequisites\
\
Behaviours:\
	searchForAClass(courseName, courseCode) \{\
	//code for searching a class based on either courseName or courseCode\
	\}\
\
	registerForAClass(courseName, courseCode) \{\
	//code to register for a class with either courseName or courseCode\
	\}\
\
	dropFromAClass(courseName, courseCode) \{\
	//code to drop from a class with either courseName or courseCode\
	\}\
\
	checkSyllabus(selectedSemester) \{\
	//code to check syllabus of entered semester\
	\}\
	\
	checkFacultyDetails(facultyName, facultyId, course) \{\
	//code to view faculty details based on facultyName, facultyId or course \
	\}\
\
	checkCourseDetails(courseName, courseCode) \{\
	//code to view course details based on either courseName or courseCode\
	\}\
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\
\
4. Design a vending Machine (will accept coins of different denominations and vends out candies, soda etc)\
\
Class: Customer\
\
Behaviours:\
\
	requestForItem() \{\
	//select item\
\
	//insert required number of coins\
\
	//collect change if any\
\
	//wait for item to dispense\
	\}\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: VendingMachine\
\
State: isWorking\
\
Behaviours:\
	dispenseItem() \{\
	//check availability of item\
\
	//request user for cash\
	\
	if(enteredCash >= itemPrice) \{\
		//check and return change if necessary\
		//dispense the item\
	\}\
	else \{\
		//wait for user to put in more cash or dismiss transaction after a certain time window and returned entered cash if any\
	\}\
	\}\
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\
\
5. Design a Parking lot\
\
Class: ParkingLot\
\
State: isOpen, areSlotsAvailable, parkingPrice\
\
- - - - - - - - - - - - - - - - - - - \
\
Class: Driver\
\
State: isLookingForParkingSlot\
\
Behaviours:\
\
	emptyParkingSlotFound() \{\
	if(isLookingForParkingSlot) \{\
		//wait for pedestrians if any\
\
		//park\
	\}\
	\}\
\
	exitParkingLot() \{\
	//wait for pedestrians if any\
\
	//exit\
	\}\
\
\
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}